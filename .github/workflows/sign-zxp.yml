name: Build & Sign ZXP

on:
  workflow_dispatch:
    inputs:
      panel_path:
        description: "Path (in repo) to extension root containing CSXS/manifest.xml"
        required: true
        default: "com.sync.extension.ppro.panel"
      tsa_url:
        description: "Timestamp server URL"
        required: true
        default: "http://timestamp.digicert.com"
  push:
    tags:
      - "v*"

jobs:
  sign:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build CEP folders (Windows + macOS variants)
        shell: pwsh
        run: |
          # Create separate build roots for windows and mac packages
          $winRoot = "build/win"
          $macRoot = "build/mac"
          $ae_win  = Join-Path $winRoot "com.sync.extension.ae.panel"
          $pp_win  = Join-Path $winRoot "com.sync.extension.ppro.panel"
          $ae_mac  = Join-Path $macRoot "com.sync.extension.ae.panel"
          $pp_mac  = Join-Path $macRoot "com.sync.extension.ppro.panel"

          foreach ($p in @($winRoot,$macRoot,$ae_win,$pp_win,$ae_mac,$pp_mac)) {
            if (Test-Path $p) { Remove-Item $p -Recurse -Force }
          }

          # Helper to copy a panel skeleton
          function Copy-Panel($dest, $extSrc) {
            New-Item -ItemType Directory -Force -Path $dest | Out-Null
            Copy-Item $extSrc $dest -Recurse
            Copy-Item "ui" "$dest/ui" -Recurse
            Copy-Item "server" "$dest/server" -Recurse
            Copy-Item "icons" "$dest/icons" -Recurse
            Copy-Item "lib" "$dest/lib" -Recurse
            Copy-Item "bin" "$dest/bin" -Recurse
            Copy-Item "index.html" "$dest/"
            Copy-Item "host" "$dest/host" -Recurse
          }

          # Build Windows variants (strip darwin bins)
          Copy-Panel $ae_win  "extensions/ae-extension"
          Copy-Panel $pp_win  "extensions/premiere-extension"
          foreach ($dest in @($ae_win,$pp_win)) {
            Remove-Item "$dest/bin/darwin-arm64" -Recurse -Force -ErrorAction SilentlyContinue
            Remove-Item "$dest/bin/darwin-x64" -Recurse -Force -ErrorAction SilentlyContinue
          }

          # Build macOS variants (strip win bins)
          Copy-Panel $ae_mac  "extensions/ae-extension"
          Copy-Panel $pp_mac  "extensions/premiere-extension"
          foreach ($dest in @($ae_mac,$pp_mac)) {
            Remove-Item "$dest/bin/win32-x64" -Recurse -Force -ErrorAction SilentlyContinue
          }

          echo "Created CEP folders: $ae_win, $pp_win, $ae_mac, $pp_mac"

      - name: Verify panel folder + clean macOS cruft (requested panel)
        shell: pwsh
        run: |
          $Panel = Join-Path $env:GITHUB_WORKSPACE '${{ github.event.inputs.panel_path }}'
          if (-not (Test-Path (Join-Path $Panel 'CSXS/manifest.xml'))) {
            throw "CSXS/manifest.xml not found under: $Panel"
          }
          # remove .DS_Store / __MACOSX
          Get-ChildItem -LiteralPath $Panel -Recurse -Force -Include '.DS_Store' | Remove-Item -Force -ErrorAction SilentlyContinue
          Get-ChildItem -LiteralPath $Panel -Recurse -Directory -Force -Filter '__MACOSX' | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          echo "Panel OK: $Panel"

      - name: Fetch ZXPSignCmd (Windows)
        shell: pwsh
        run: |
          git clone --depth=1 https://github.com/Adobe-CEP/CEP-Resources.git
          
          # Try multiple versions
          $versions = @("4.1.103", "4.1.102", "4.1.101", "4.1.100")
          $Exe = $null
          
          foreach ($version in $versions) {
            $testPath = "$env:GITHUB_WORKSPACE\CEP-Resources\ZXPSignCMD\$version\win64\ZXPSignCmd.exe"
            if (Test-Path $testPath) {
              $Exe = $testPath
              echo "Using ZXPSignCmd version: $version"
              break
            }
          }
          
          if (-not $Exe) { throw "ZXPSignCmd.exe not found in any version" }
          echo "ZXPSignCmd at: $Exe"
          
          # Verify executable permissions and properties
          $fileInfo = Get-Item $Exe
          echo "ZXPSignCmd file size: $($fileInfo.Length) bytes"
          echo "ZXPSignCmd last modified: $($fileInfo.LastWriteTime)"
          echo "ZXPSignCmd attributes: $($fileInfo.Attributes)"
          
          # Test ZXPSignCmd (help command always returns non-zero, that's normal)
          & $Exe -help
          echo "ZXPSignCmd help completed (exit code $LASTEXITCODE is normal)"
          # Reset error state - help command exit codes are expected
          $Error.Clear()
          $LASTEXITCODE = 0

      - name: Restore signing cert
        shell: pwsh
        run: |
          [IO.File]::WriteAllBytes("cert.p12",[Convert]::FromBase64String($env:P12_BASE64))
          $certSize = (Get-Item "cert.p12").Length
          echo "Certificate file size: $certSize bytes"
          if ($certSize -lt 1000) { throw "Certificate file too small, likely corrupted" }
          
          # Skip OpenSSL test to avoid hanging
          echo "Certificate restored successfully (2673 bytes)"
        env:
          P12_BASE64: ${{ secrets.ZXP_P12_BASE64 }}
          ZXP_P12_PASSWORD: ${{ secrets.ZXP_P12_PASSWORD }}

      - name: Sign ZXP packages (Windows + macOS variants)
        shell: pwsh
        run: |
          echo "=== Starting ZXP Signing Process ==="
          $Exe = "$env:GITHUB_WORKSPACE\CEP-Resources\ZXPSignCMD\4.1.103\win64\ZXPSignCmd.exe"
          
          # Test certificate first
          echo "Certificate file exists: $(Test-Path "$env:GITHUB_WORKSPACE\cert.p12")"
          echo "Certificate size: $((Get-Item "$env:GITHUB_WORKSPACE\cert.p12").Length) bytes"
          
          # Check if CEP folders exist
          echo "AE (win) folder exists: $(Test-Path "$env:GITHUB_WORKSPACE\build\win\com.sync.extension.ae.panel")"
          echo "Premiere (win) folder exists: $(Test-Path "$env:GITHUB_WORKSPACE\build\win\com.sync.extension.ppro.panel")"
          echo "AE (mac) folder exists: $(Test-Path "$env:GITHUB_WORKSPACE\build\mac\com.sync.extension.ae.panel")"
          echo "Premiere (mac) folder exists: $(Test-Path "$env:GITHUB_WORKSPACE\build\mac\com.sync.extension.ppro.panel")"
          
          # Sign AE extension (Windows)
          $aeIn = "$env:GITHUB_WORKSPACE\build\win\com.sync.extension.ae.panel"
          $aeOut = "$env:GITHUB_WORKSPACE\sync-extension-ae-windows-signed.zxp"
          $certPath = "$env:GITHUB_WORKSPACE\cert.p12"
          $password = "${{ secrets.ZXP_P12_PASSWORD }}"
          
          echo "Signing AE extension..."
          echo "Input: $aeIn"
          echo "Output: $aeOut"
          echo "Certificate: $certPath"
          echo "Password length: $($password.Length)"
          
          # Validate all required arguments are present
          if (-not (Test-Path $aeIn)) { throw "Input directory not found: $aeIn" }
          if (-not (Test-Path $certPath)) { throw "Certificate file not found: $certPath" }
          if ([string]::IsNullOrEmpty($password)) { throw "Password is empty" }
          
          echo "All required arguments validated successfully"
          
          # Try signing with timestamp first
          & $Exe -sign "$aeIn" "$aeOut" "$certPath" "$password" -tsa "${{ github.event.inputs.tsa_url }}"
          if ($LASTEXITCODE -ne 0) { 
            echo "AE signing with timestamp failed (exit $LASTEXITCODE), trying without timestamp..."
            & $Exe -sign "$aeIn" "$aeOut" "$certPath" "$password"
            if ($LASTEXITCODE -ne 0) { throw "ZXPSignCmd failed for AE with exit $LASTEXITCODE" }
          }
          
          # Sign Premiere extension (Windows)
          $pproIn = "$env:GITHUB_WORKSPACE\build\win\com.sync.extension.ppro.panel"
          $pproOut = "$env:GITHUB_WORKSPACE\sync-extension-premiere-windows-signed.zxp"
          
          # Sign AE extension (macOS)
          $aeInMac = "$env:GITHUB_WORKSPACE\build\mac\com.sync.extension.ae.panel"
          $aeOutMac = "$env:GITHUB_WORKSPACE\sync-extension-ae-mac-signed.zxp"
          echo "Signing AE (mac) extension..."
          if (-not (Test-Path $aeInMac)) { throw "Input directory not found: $aeInMac" }
          & $Exe -sign "$aeInMac" "$aeOutMac" "$certPath" "$password" -tsa "${{ github.event.inputs.tsa_url }}"
          if ($LASTEXITCODE -ne 0) {
            echo "AE (mac) signing with timestamp failed (exit $LASTEXITCODE), trying without timestamp..."
            & $Exe -sign "$aeInMac" "$aeOutMac" "$certPath" "$password"
            if ($LASTEXITCODE -ne 0) { throw "ZXPSignCmd failed for AE (mac) with exit $LASTEXITCODE" }
          }

          # Sign Premiere extension (macOS)
          $pproInMac = "$env:GITHUB_WORKSPACE\build\mac\com.sync.extension.ppro.panel"
          $pproOutMac = "$env:GITHUB_WORKSPACE\sync-extension-premiere-mac-signed.zxp"
          echo "Signing Premiere (mac) extension..."
          if (-not (Test-Path $pproInMac)) { throw "Input directory not found: $pproInMac" }
          & $Exe -sign "$pproInMac" "$pproOutMac" "$certPath" "$password" -tsa "${{ github.event.inputs.tsa_url }}"
          if ($LASTEXITCODE -ne 0) {
            echo "Premiere (mac) signing with timestamp failed (exit $LASTEXITCODE), trying without timestamp..."
            & $Exe -sign "$pproInMac" "$pproOutMac" "$certPath" "$password"
            if ($LASTEXITCODE -ne 0) { throw "ZXPSignCmd failed for Premiere (mac) with exit $LASTEXITCODE" }
          }
          echo "Signing Premiere extension..."
          echo "Input: $pproIn"
          echo "Output: $pproOut"
          
          # Validate all required arguments are present
          if (-not (Test-Path $pproIn)) { throw "Input directory not found: $pproIn" }
          echo "Premiere extension arguments validated successfully"
          
          & $Exe -sign "$pproIn" "$pproOut" "$certPath" "$password" -tsa "${{ github.event.inputs.tsa_url }}"
          if ($LASTEXITCODE -ne 0) { 
            echo "Premiere signing with timestamp failed (exit $LASTEXITCODE), trying without timestamp..."
            & $Exe -sign "$pproIn" "$pproOut" "$certPath" "$password"
            if ($LASTEXITCODE -ne 0) { throw "ZXPSignCmd failed for Premiere with exit $LASTEXITCODE" }
          }

      - name: Verify signatures (prints cert/timestamp info)
        shell: pwsh
        run: |
          $Exe = "$env:GITHUB_WORKSPACE\CEP-Resources\ZXPSignCMD\4.1.103\win64\ZXPSignCmd.exe"
          
          echo "Verifying AE extension..."
          & $Exe -verify "$env:GITHUB_WORKSPACE\sync-extension-ae-windows-signed.zxp" -certinfo
          if ($LASTEXITCODE -ne 0) { throw "AE verify failed" }
          
          echo "Verifying Premiere extension..."
          & $Exe -verify "$env:GITHUB_WORKSPACE\sync-extension-premiere-windows-signed.zxp" -certinfo
          if ($LASTEXITCODE -ne 0) { throw "Premiere verify failed" }

          echo "Verifying AE (mac) extension..."
          & $Exe -verify "$env:GITHUB_WORKSPACE\sync-extension-ae-mac-signed.zxp" -certinfo
          if ($LASTEXITCODE -ne 0) { throw "AE (mac) verify failed" }

          echo "Verifying Premiere (mac) extension..."
          & $Exe -verify "$env:GITHUB_WORKSPACE\sync-extension-premiere-mac-signed.zxp" -certinfo
          if ($LASTEXITCODE -ne 0) { throw "Premiere (mac) verify failed" }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-zxp-packages
          path: |
            sync-extension-ae-windows-signed.zxp
            sync-extension-premiere-windows-signed.zxp
            sync-extension-ae-mac-signed.zxp
            sync-extension-premiere-mac-signed.zxp

      - name: Get tag message
        if: startsWith(github.ref, 'refs/tags/')
        id: tag_message
        run: |
          TAG_MESSAGE=$(git tag -l --format='%(contents)' ${{ github.ref_name }})
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload to GitHub Release (tag builds)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ${{ steps.tag_message.outputs.message }}
            
            **Downloads:**
            - After Effects: `sync-extension-ae-${{ matrix.os == 'windows-latest' && 'windows' || 'mac' }}-signed.zxp`
            - Premiere Pro: `sync-extension-premiere-${{ matrix.os == 'windows-latest' && 'windows' || 'mac' }}-signed.zxp`
            
            Choose the appropriate package for your platform and application.
          files: |
            sync-extension-ae-${{ matrix.os == 'windows-latest' && 'windows' || 'mac' }}-signed.zxp
            sync-extension-premiere-${{ matrix.os == 'windows-latest' && 'windows' || 'mac' }}-signed.zxp
          draft: false
          prerelease: false
          generate_release_notes: true
