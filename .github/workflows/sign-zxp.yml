name: Build & Sign ZXP

on:
  workflow_dispatch:
    inputs:
      panel_path:
        description: "Path (in repo) to extension root containing CSXS/manifest.xml"
        required: true
        default: "com.sync.extension.ppro.panel"
      tsa_url:
        description: "Timestamp server URL"
        required: true
        default: "http://timestamp.digicert.com"
  push:
    tags:
      - "v*"

jobs:
  sign:
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build CEP folders for all platforms
        run: |
          # Create separate build roots for windows and mac packages
          WIN_ROOT="build/win"
          MAC_ROOT="build/mac"
          AE_WIN="$WIN_ROOT/com.sync.extension.ae.panel"
          PP_WIN="$WIN_ROOT/com.sync.extension.ppro.panel"
          AE_MAC="$MAC_ROOT/com.sync.extension.ae.panel"
          PP_MAC="$MAC_ROOT/com.sync.extension.ppro.panel"
          
          # Clean existing folders
          rm -rf "$WIN_ROOT" "$MAC_ROOT" "$AE_WIN" "$PP_WIN" "$AE_MAC" "$PP_MAC"
          
          # Create build directories
          mkdir -p "$WIN_ROOT" "$MAC_ROOT"
          
          # Helper to copy a panel skeleton
          copy_panel() {
            local dest="$1"
            local ext_src="$2"
            
            # Create destination directory
            mkdir -p "$dest"
            
            # Copy extension contents into destination
            cp -R "$ext_src"/* "$dest/"
            
            # Then add shared files
            cp -R ui "$dest/ui"
            cp -R server "$dest/server"
            cp -R icons "$dest/icons"
            cp -R lib "$dest/lib"
            cp -R bin "$dest/bin"
            cp index.html "$dest/"
            cp -R host "$dest/host"
            
            # Set execute permissions on Node.js binaries
            if [ -f "$dest/bin/darwin-arm64/node" ]; then
              chmod +x "$dest/bin/darwin-arm64/node"
            fi
            if [ -f "$dest/bin/darwin-x64/node" ]; then
              chmod +x "$dest/bin/darwin-x64/node"
            fi
          }
          
          # Build Windows variants (strip darwin bins)
          copy_panel "$AE_WIN" "extensions/ae-extension"
          copy_panel "$PP_WIN" "extensions/premiere-extension"
          rm -rf "$AE_WIN/bin/darwin-arm64" "$AE_WIN/bin/darwin-x64"
          rm -rf "$PP_WIN/bin/darwin-arm64" "$PP_WIN/bin/darwin-x64"
          
          # Build macOS variants (strip win bins)
          copy_panel "$AE_MAC" "extensions/ae-extension"
          copy_panel "$PP_MAC" "extensions/premiere-extension"
          rm -rf "$AE_MAC/bin/win32-x64" "$PP_MAC/bin/win32-x64"
          
          echo "Created CEP folders: $AE_WIN, $PP_WIN, $AE_MAC, $PP_MAC"

      - name: Fetch ZXPSignCmd
        run: |
          git clone --depth=1 https://github.com/Adobe-CEP/CEP-Resources.git
          
          # Try multiple versions
          versions=("4.1.103" "4.1.102" "4.1.101" "4.1.100")
          exe=""
          
          for version in "${versions[@]}"; do
            test_path="$GITHUB_WORKSPACE/CEP-Resources/ZXPSignCMD/$version/mac64/ZXPSignCmd"
            if [ -f "$test_path" ]; then
              exe="$test_path"
              echo "Using ZXPSignCmd version: $version"
              break
            fi
          done
          
          if [ -z "$exe" ]; then
            echo "ZXPSignCmd not found in any version"
            exit 1
          fi
          echo "ZXPSignCmd at: $exe"
          
          # Verify executable permissions and properties
          ls -la "$exe"
          
          # Test ZXPSignCmd (help command always returns non-zero, that's normal)
          "$exe" -help || true
          echo "ZXPSignCmd help completed (exit code $? is normal)"

      - name: Restore signing cert
        run: |
          echo "$P12_BASE64" | base64 -d > cert.p12
          cert_size=$(wc -c < cert.p12)
          echo "Certificate file size: $cert_size bytes"
          if [ "$cert_size" -lt 1000 ]; then
            echo "Certificate file too small, likely corrupted"
            exit 1
          fi
          
          echo "Certificate restored successfully ($cert_size bytes)"
        env:
          P12_BASE64: ${{ secrets.ZXP_P12_BASE64 }}
          ZXP_P12_PASSWORD: ${{ secrets.ZXP_P12_PASSWORD }}

      - name: Sign all ZXP packages
        run: |
          echo "=== Starting ZXP Signing Process ==="
          exe="$GITHUB_WORKSPACE/CEP-Resources/ZXPSignCMD/4.1.103/mac64/ZXPSignCmd"
          
          # Test certificate first
          echo "Certificate file exists: $(test -f "$GITHUB_WORKSPACE/cert.p12" && echo "true" || echo "false")"
          echo "Certificate size: $(wc -c < "$GITHUB_WORKSPACE/cert.p12") bytes"
          
          # Check if CEP folders exist
          echo "AE Windows folder exists: $(test -d "$GITHUB_WORKSPACE/build/win/com.sync.extension.ae.panel" && echo "true" || echo "false")"
          echo "Premiere Windows folder exists: $(test -d "$GITHUB_WORKSPACE/build/win/com.sync.extension.ppro.panel" && echo "true" || echo "false")"
          echo "AE macOS folder exists: $(test -d "$GITHUB_WORKSPACE/build/mac/com.sync.extension.ae.panel" && echo "true" || echo "false")"
          echo "Premiere macOS folder exists: $(test -d "$GITHUB_WORKSPACE/build/mac/com.sync.extension.ppro.panel" && echo "true" || echo "false")"
          
          cert_path="$GITHUB_WORKSPACE/cert.p12"
          password="${{ secrets.ZXP_P12_PASSWORD }}"
          
          # Create separate directories for each ZXP (each should contain only one panel)
          mkdir -p build/zxp-ae-win build/zxp-ppro-win build/zxp-ae-mac build/zxp-ppro-mac
          
          # Move each panel to its own ZXP directory
          mv "$GITHUB_WORKSPACE/build/win/com.sync.extension.ae.panel" build/zxp-ae-win/
          mv "$GITHUB_WORKSPACE/build/win/com.sync.extension.ppro.panel" build/zxp-ppro-win/
          mv "$GITHUB_WORKSPACE/build/mac/com.sync.extension.ae.panel" build/zxp-ae-mac/
          mv "$GITHUB_WORKSPACE/build/mac/com.sync.extension.ppro.panel" build/zxp-ppro-mac/
          
          # Define all packages to sign
          packages=(
            "build/zxp-ae-win:sync-extension-ae-windows-signed.zxp:AE Windows:com.sync.extension.ae.panel"
            "build/zxp-ppro-win:sync-extension-premiere-windows-signed.zxp:Premiere Windows:com.sync.extension.ppro.panel"
            "build/zxp-ae-mac:sync-extension-ae-mac-signed.zxp:AE macOS:com.sync.extension.ae.panel"
            "build/zxp-ppro-mac:sync-extension-premiere-mac-signed.zxp:Premiere macOS:com.sync.extension.ppro.panel"
          )
          
          # Sign each package
          for pkg in "${packages[@]}"; do
            IFS=':' read -r input output name panel_dir <<< "$pkg"
            echo "Signing $name..."
            echo "Input: $input"
            echo "Output: $output"
            
            # Validate all required arguments are present
            if [ ! -d "$input" ]; then
              echo "Input directory not found: $input"
              exit 1
            fi
            if [ ! -d "$input/$panel_dir" ]; then
              echo "Panel directory not found: $input/$panel_dir"
              exit 1
            fi
            if [ ! -f "$cert_path" ]; then
              echo "Certificate file not found: $cert_path"
              exit 1
            fi
            if [ -z "$password" ]; then
              echo "Password is empty"
              exit 1
            fi
            
            echo "All required arguments validated successfully for $name"
            
            # Try signing with timestamp first
            if ! "$exe" -sign "$input" "$output" "$cert_path" "$password" -tsa "${{ github.event.inputs.tsa_url }}"; then
              echo "$name signing with timestamp failed, trying without timestamp..."
              if ! "$exe" -sign "$input" "$output" "$cert_path" "$password"; then
                echo "ZXPSignCmd failed for $name"
                exit 1
              fi
            fi
            echo "$name signed successfully"
          done

      - name: Verify signatures
        run: |
          exe="$GITHUB_WORKSPACE/CEP-Resources/ZXPSignCMD/4.1.103/mac64/ZXPSignCmd"
          
          zxps=(
            "sync-extension-ae-windows-signed.zxp"
            "sync-extension-premiere-windows-signed.zxp"
            "sync-extension-ae-mac-signed.zxp"
            "sync-extension-premiere-mac-signed.zxp"
          )
          
          for zxp in "${zxps[@]}"; do
            echo "Verifying $zxp..."
            if ! "$exe" -verify "$GITHUB_WORKSPACE/$zxp" -certinfo; then
              echo "$zxp verify failed"
              exit 1
            fi
            echo "$zxp verified successfully"
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-zxp-packages
          path: |
            sync-extension-ae-windows-signed.zxp
            sync-extension-premiere-windows-signed.zxp
            sync-extension-ae-mac-signed.zxp
            sync-extension-premiere-mac-signed.zxp

      - name: Get tag message
        if: startsWith(github.ref, 'refs/tags/')
        id: tag_message
        run: |
          tag_message=$(git tag -l --format='%(contents)' ${{ github.ref_name }})
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$tag_message" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ${{ steps.tag_message.outputs.message }}
            
            **Downloads:**
            - After Effects: `sync-extension-ae-windows-signed.zxp` and `sync-extension-ae-mac-signed.zxp`
            - Premiere Pro: `sync-extension-premiere-windows-signed.zxp` and `sync-extension-premiere-mac-signed.zxp`
            
            Choose the appropriate package for your platform and application.
          files: |
            sync-extension-ae-windows-signed.zxp
            sync-extension-premiere-windows-signed.zxp
            sync-extension-ae-mac-signed.zxp
            sync-extension-premiere-mac-signed.zxp
          draft: false
          prerelease: false
          generate_release_notes: true