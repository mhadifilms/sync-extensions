name: Build & Sign ZXP

on:
  workflow_dispatch:
    inputs:
      panel_path:
        description: "Path (in repo) to extension root containing CSXS/manifest.xml"
        required: true
        default: "com.sync.extension.ppro.panel"
      tsa_url:
        description: "Timestamp server URL"
        required: true
        default: "http://timestamp.digicert.com"
  push:
    tags:
      - "v*"

jobs:
  sign:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build CEP folders for all platforms
        shell: pwsh
        run: |
          # Create separate build roots for windows and mac packages
          $winRoot = "build/win"
          $macRoot = "build/mac"
          $ae_win  = Join-Path $winRoot "com.sync.extension.ae.panel"
          $pp_win  = Join-Path $winRoot "com.sync.extension.ppro.panel"
          $ae_mac  = Join-Path $macRoot "com.sync.extension.ae.panel"
          $pp_mac  = Join-Path $macRoot "com.sync.extension.ppro.panel"
          
          # Clean existing folders
          foreach ($p in @($winRoot,$macRoot,$ae_win,$pp_win,$ae_mac,$pp_mac)) {
            if (Test-Path $p) { Remove-Item $p -Recurse -Force }
          }
          
          # Create build directories
          New-Item -ItemType Directory -Force -Path $winRoot | Out-Null
          New-Item -ItemType Directory -Force -Path $macRoot | Out-Null
          
          # Helper to copy a panel skeleton
          function Copy-Panel($dest, $extSrc) {
            # Create destination directory
            New-Item -ItemType Directory -Force -Path $dest | Out-Null
            # Copy extension contents into destination
            Copy-Item "$extSrc/*" $dest -Recurse
            # Then add shared files (don't copy ui since extensions already have their own)
            Copy-Item "server" "$dest/server" -Recurse
            Copy-Item "icons" "$dest/icons" -Recurse
            Copy-Item "lib" "$dest/lib" -Recurse
            Copy-Item "bin" "$dest/bin" -Recurse
            Copy-Item "index.html" "$dest/"
            Copy-Item "host" "$dest/host" -Recurse
            # Copy main UI files to the existing ui directory (merge, don't replace)
            Copy-Item "ui/*" "$dest/ui/" -Recurse -Force
          }
          
          # Build Windows variants (strip darwin bins)
          Copy-Panel $ae_win  "extensions/ae-extension"
          Copy-Panel $pp_win  "extensions/premiere-extension"
          foreach ($dest in @($ae_win,$pp_win)) {
            Remove-Item "$dest/bin/darwin-arm64" -Recurse -Force -ErrorAction SilentlyContinue
            Remove-Item "$dest/bin/darwin-x64" -Recurse -Force -ErrorAction SilentlyContinue
          }
          
          # Build macOS variants (strip win bins)
          Copy-Panel $ae_mac  "extensions/ae-extension"
          Copy-Panel $pp_mac  "extensions/premiere-extension"
          foreach ($dest in @($ae_mac,$pp_mac)) {
            Remove-Item "$dest/bin/win32-x64" -Recurse -Force -ErrorAction SilentlyContinue
          }
          
          echo "Created CEP folders: $ae_win, $pp_win, $ae_mac, $pp_mac"

      - name: Fetch ZXPSignCmd
        shell: pwsh
        run: |
          git clone --depth=1 https://github.com/Adobe-CEP/CEP-Resources.git
          
          # Try multiple versions
          $versions = @("4.1.103", "4.1.102", "4.1.101", "4.1.100")
          $Exe = $null
          
          foreach ($version in $versions) {
            $testPath = "$env:GITHUB_WORKSPACE\CEP-Resources\ZXPSignCMD\$version\win64\ZXPSignCmd.exe"
            if (Test-Path $testPath) {
              $Exe = $testPath
              echo "Using ZXPSignCmd version: $version"
              break
            }
          }
          
          if (-not $Exe) { throw "ZXPSignCmd.exe not found in any version" }
          echo "ZXPSignCmd at: $Exe"
          
          # Test ZXPSignCmd (help command always returns non-zero, that's normal)
          & $Exe -help
          echo "ZXPSignCmd help completed (exit code $LASTEXITCODE is normal)"
          # Reset error state - help command exit codes are expected
          $Error.Clear()
          $LASTEXITCODE = 0

      - name: Restore signing cert
        shell: pwsh
        run: |
          [IO.File]::WriteAllBytes("cert.p12",[Convert]::FromBase64String($env:P12_BASE64))
          $certSize = (Get-Item "cert.p12").Length
          echo "Certificate file size: $certSize bytes"
          if ($certSize -lt 1000) { throw "Certificate file too small, likely corrupted" }
          
          echo "Certificate restored successfully ($certSize bytes)"
        env:
          P12_BASE64: ${{ secrets.ZXP_P12_BASE64 }}
          ZXP_P12_PASSWORD: ${{ secrets.ZXP_P12_PASSWORD }}

      - name: Sign all ZXP packages
        shell: pwsh
        run: |
          echo "=== Starting ZXP Signing Process ==="
          # Use the detected ZXPSignCmd version
          $versions = @("4.1.103", "4.1.102", "4.1.101", "4.1.100")
          $Exe = $null
          
          foreach ($version in $versions) {
            $testPath = "$env:GITHUB_WORKSPACE\CEP-Resources\ZXPSignCMD\$version\win64\ZXPSignCmd.exe"
            if (Test-Path $testPath) {
              $Exe = $testPath
              echo "Using ZXPSignCmd version: $version"
              break
            }
          }
          
          if (-not $Exe) { throw "ZXPSignCmd.exe not found in any version" }
          
          # Test certificate first
          echo "Certificate file exists: $(Test-Path "$env:GITHUB_WORKSPACE\cert.p12")"
          echo "Certificate size: $((Get-Item "$env:GITHUB_WORKSPACE\cert.p12").Length) bytes"
          
          # Check if CEP folders exist
          echo "AE Windows folder exists: $(Test-Path "$env:GITHUB_WORKSPACE\build\win\com.sync.extension.ae.panel")"
          echo "Premiere Windows folder exists: $(Test-Path "$env:GITHUB_WORKSPACE\build\win\com.sync.extension.ppro.panel")"
          echo "AE macOS folder exists: $(Test-Path "$env:GITHUB_WORKSPACE\build\mac\com.sync.extension.ae.panel")"
          echo "Premiere macOS folder exists: $(Test-Path "$env:GITHUB_WORKSPACE\build\mac\com.sync.extension.ppro.panel")"
          
          $certPath = "$env:GITHUB_WORKSPACE\cert.p12"
          $password = "${{ secrets.ZXP_P12_PASSWORD }}"
          
          # Create separate directories for each ZXP (each should contain only one panel)
          New-Item -ItemType Directory -Force -Path "build\zxp-ae-win" | Out-Null
          New-Item -ItemType Directory -Force -Path "build\zxp-ppro-win" | Out-Null
          New-Item -ItemType Directory -Force -Path "build\zxp-ae-mac" | Out-Null
          New-Item -ItemType Directory -Force -Path "build\zxp-ppro-mac" | Out-Null
          
          # Move each panel to its own ZXP directory
          Move-Item "$env:GITHUB_WORKSPACE\build\win\com.sync.extension.ae.panel" "build\zxp-ae-win\" -Force
          Move-Item "$env:GITHUB_WORKSPACE\build\win\com.sync.extension.ppro.panel" "build\zxp-ppro-win\" -Force
          Move-Item "$env:GITHUB_WORKSPACE\build\mac\com.sync.extension.ae.panel" "build\zxp-ae-mac\" -Force
          Move-Item "$env:GITHUB_WORKSPACE\build\mac\com.sync.extension.ppro.panel" "build\zxp-ppro-mac\" -Force
          
          # Create mimetype file (must be first file in ZXP)
          $mimetypeContent = "application/vnd.adobe.air-ucf-package+zip"
          foreach ($zxpDir in @("build\zxp-ae-win", "build\zxp-ppro-win", "build\zxp-ae-mac", "build\zxp-ppro-mac")) {
            $mimetypePath = Join-Path $zxpDir "mimetype"
            [IO.File]::WriteAllText($mimetypePath, $mimetypeContent)
            echo "Created mimetype file: $mimetypePath"
          }
          
          # Note: ZXPSignCmd will include the mimetype file in the ZXP
          # The mimetype file is created and will be included in the final ZXP
          echo "Mimetype files created in all ZXP directories"
          
          # Validate required files and set permissions
          foreach ($zxpDir in @("build\zxp-ae-win", "build\zxp-ppro-win", "build\zxp-ae-mac", "build\zxp-ppro-mac")) {
            echo "Validating $zxpDir..."
            
            # Check required files exist
            $requiredFiles = @("mimetype", "index.html")
            foreach ($file in $requiredFiles) {
              $filePath = Join-Path $zxpDir $file
              if (-not (Test-Path $filePath)) { 
                throw "Required file missing: $filePath" 
              }
            }
            
            # Check manifest.xml exists in panel directory
            $panelDirs = Get-ChildItem -Path $zxpDir -Directory
            $manifestFound = $false
            foreach ($panelDir in $panelDirs) {
              $manifestPath = Join-Path $panelDir.FullName "CSXS\manifest.xml"
              if (Test-Path $manifestPath) {
                $manifestFound = $true
                echo "Found manifest.xml at: $manifestPath"
                break
              }
            }
            if (-not $manifestFound) {
              throw "No manifest.xml found in any panel directory within: $zxpDir"
            }
            
            # Check Node.js binaries exist and set permissions (macOS only)
            if ($zxpDir -like "*mac*") {
              $nodeBinaries = Get-ChildItem -Path $zxpDir -Recurse -Name "node" -File
              if ($nodeBinaries.Count -eq 0) {
                throw "No Node.js binaries found in macOS package: $zxpDir"
              }
              foreach ($nodeBin in $nodeBinaries) {
                $fullPath = Join-Path $zxpDir $nodeBin
                echo "Setting execute permissions on: $fullPath"
                
                # Use attrib command to set archive bit (Windows equivalent of execute permission)
                attrib +A "$fullPath"
                
                # Also try setting via PowerShell file attributes
                $fileInfo = Get-Item $fullPath
                $fileInfo.Attributes = $fileInfo.Attributes -bor [System.IO.FileAttributes]::Archive
              }
            }
            
            echo "Validation completed for: $zxpDir"
          }
          
          # Define all packages to sign
          $packages = @(
            @{Input="$env:GITHUB_WORKSPACE\build\zxp-ae-win"; Output="$env:GITHUB_WORKSPACE\sync-extension-ae-windows-signed.zxp"; Name="AE Windows"; PanelDir="com.sync.extension.ae.panel"},
            @{Input="$env:GITHUB_WORKSPACE\build\zxp-ppro-win"; Output="$env:GITHUB_WORKSPACE\sync-extension-premiere-windows-signed.zxp"; Name="Premiere Windows"; PanelDir="com.sync.extension.ppro.panel"},
            @{Input="$env:GITHUB_WORKSPACE\build\zxp-ae-mac"; Output="$env:GITHUB_WORKSPACE\sync-extension-ae-mac-signed.zxp"; Name="AE macOS"; PanelDir="com.sync.extension.ae.panel"},
            @{Input="$env:GITHUB_WORKSPACE\build\zxp-ppro-mac"; Output="$env:GITHUB_WORKSPACE\sync-extension-premiere-mac-signed.zxp"; Name="Premiere macOS"; PanelDir="com.sync.extension.ppro.panel"}
          )
          
          # Sign each package
          foreach ($pkg in $packages) {
            echo "Signing $($pkg.Name)..."
            echo "Input: $($pkg.Input)"
            echo "Output: $($pkg.Output)"
            
            # Validate all required arguments are present
            if (-not (Test-Path $pkg.Input)) { throw "Input directory not found: $($pkg.Input)" }
            if (-not (Test-Path "$($pkg.Input)\$($pkg.PanelDir)")) { throw "Panel directory not found: $($pkg.Input)\$($pkg.PanelDir)" }
            if (-not (Test-Path $certPath)) { throw "Certificate file not found: $certPath" }
            if ([string]::IsNullOrEmpty($password)) { throw "Password is empty" }
            
            echo "All required arguments validated successfully for $($pkg.Name)"
            
            # Try signing with timestamp first
            & $Exe -sign $pkg.Input $pkg.Output $certPath $password -tsa "${{ github.event.inputs.tsa_url }}"
            if ($LASTEXITCODE -ne 0) { 
              echo "$($pkg.Name) signing with timestamp failed (exit $LASTEXITCODE), trying without timestamp..."
              & $Exe -sign $pkg.Input $pkg.Output $certPath $password
              if ($LASTEXITCODE -ne 0) { throw "ZXPSignCmd failed for $($pkg.Name) with exit $LASTEXITCODE" }
            }
            echo "$($pkg.Name) signed successfully"
          }

      - name: Verify signatures
        shell: pwsh
        run: |
          # Use the detected ZXPSignCmd version
          $versions = @("4.1.103", "4.1.102", "4.1.101", "4.1.100")
          $Exe = $null
          
          foreach ($version in $versions) {
            $testPath = "$env:GITHUB_WORKSPACE\CEP-Resources\ZXPSignCMD\$version\win64\ZXPSignCmd.exe"
            if (Test-Path $testPath) {
              $Exe = $testPath
              echo "Using ZXPSignCmd version: $version"
              break
            }
          }
          
          if (-not $Exe) { throw "ZXPSignCmd.exe not found in any version" }
          
          $zxps = @(
            "sync-extension-ae-windows-signed.zxp",
            "sync-extension-premiere-windows-signed.zxp", 
            "sync-extension-ae-mac-signed.zxp",
            "sync-extension-premiere-mac-signed.zxp"
          )
          
          foreach ($zxp in $zxps) {
            echo "Verifying $zxp..."
            & $Exe -verify "$env:GITHUB_WORKSPACE\$zxp" -certinfo
            if ($LASTEXITCODE -ne 0) { throw "$zxp verify failed" }
            echo "$zxp verified successfully"
          }
          
          # Note: Quarantine attributes are added by macOS when files are downloaded
          # Users need to remove them manually: xattr -d com.apple.provenance *.zxp
          echo "Note: If ZXP installer rejects the extension, remove quarantine attributes:"
          echo "xattr -d com.apple.provenance *.zxp"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-zxp-packages
          path: |
            sync-extension-ae-windows-signed.zxp
            sync-extension-premiere-windows-signed.zxp
            sync-extension-ae-mac-signed.zxp
            sync-extension-premiere-mac-signed.zxp

      - name: Get tag message
        if: startsWith(github.ref, 'refs/tags/')
        id: tag_message
        shell: pwsh
        run: |
          $TAG_MESSAGE = git tag -l --format='%(contents)' ${{ github.ref_name }}
          echo "message<<EOF" >> $env:GITHUB_OUTPUT
          echo "$TAG_MESSAGE" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT

      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ${{ steps.tag_message.outputs.message }}
            
            **Downloads:**
            - After Effects: `sync-extension-ae-windows-signed.zxp` and `sync-extension-ae-mac-signed.zxp`
            - Premiere Pro: `sync-extension-premiere-windows-signed.zxp` and `sync-extension-premiere-mac-signed.zxp`
            
            Choose the appropriate package for your platform and application.
          files: |
            sync-extension-ae-windows-signed.zxp
            sync-extension-premiere-windows-signed.zxp
            sync-extension-ae-mac-signed.zxp
            sync-extension-premiere-mac-signed.zxp
          draft: false
          prerelease: false
          generate_release_notes: true