name: Build & Sign ZXP

on:
  workflow_dispatch:
    inputs:
      panel_path:
        description: "Path (in repo) to extension root containing CSXS/manifest.xml"
        required: true
        default: "com.sync.extension.ppro.panel"
      tsa_url:
        description: "Timestamp server URL"
        required: true
        default: "http://timestamp.digicert.com"

jobs:
  sign:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build CEP folders
        shell: pwsh
        run: |
          # Create CEP-ready extension folders
          $ae_dest = "com.sync.extension.ae.panel"
          $ppro_dest = "com.sync.extension.ppro.panel"
          
          # Clean existing folders
          if (Test-Path $ae_dest) { Remove-Item $ae_dest -Recurse -Force }
          if (Test-Path $ppro_dest) { Remove-Item $ppro_dest -Recurse -Force }
          
          # Copy AE extension files
          Copy-Item "extensions/ae-extension" $ae_dest -Recurse
          
          # Copy Premiere extension files  
          Copy-Item "extensions/premiere-extension" $ppro_dest -Recurse
          
          # Copy shared files to both extensions
          foreach ($dest in @($ae_dest, $ppro_dest)) {
            Copy-Item "ui" "$dest/ui" -Recurse
            Copy-Item "server" "$dest/server" -Recurse
            Copy-Item "icons" "$dest/icons" -Recurse
            Copy-Item "lib" "$dest/lib" -Recurse
            Copy-Item "bin" "$dest/bin" -Recurse
            Copy-Item "index.html" "$dest/"
            Copy-Item "host" "$dest/host" -Recurse
          }
          
          # Remove macOS binaries for Windows package
          Remove-Item "$ae_dest/bin/darwin-arm64" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item "$ae_dest/bin/darwin-x64" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item "$ppro_dest/bin/darwin-arm64" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item "$ppro_dest/bin/darwin-x64" -Recurse -Force -ErrorAction SilentlyContinue
          
          echo "Created CEP folders: $ae_dest, $ppro_dest"

      - name: Verify panel folder + clean macOS cruft
        shell: pwsh
        run: |
          $Panel = Join-Path $env:GITHUB_WORKSPACE '${{ github.event.inputs.panel_path }}'
          if (-not (Test-Path (Join-Path $Panel 'CSXS/manifest.xml'))) {
            throw "CSXS/manifest.xml not found under: $Panel"
          }
          # remove .DS_Store / __MACOSX
          Get-ChildItem -LiteralPath $Panel -Recurse -Force -Include '.DS_Store' | Remove-Item -Force -ErrorAction SilentlyContinue
          Get-ChildItem -LiteralPath $Panel -Recurse -Directory -Force -Filter '__MACOSX' | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          echo "Panel OK: $Panel"

      - name: Fetch ZXPSignCmd (Windows)
        shell: pwsh
        run: |
          git clone --depth=1 https://github.com/Adobe-CEP/CEP-Resources.git
          
          # Try multiple versions
          $versions = @("4.1.103", "4.1.102", "4.1.101", "4.1.100")
          $Exe = $null
          
          foreach ($version in $versions) {
            $testPath = "$env:GITHUB_WORKSPACE\CEP-Resources\ZXPSignCMD\$version\win64\ZXPSignCmd.exe"
            if (Test-Path $testPath) {
              $Exe = $testPath
              echo "Using ZXPSignCmd version: $version"
              break
            }
          }
          
          if (-not $Exe) { throw "ZXPSignCmd.exe not found in any version" }
          echo "ZXPSignCmd at: $Exe"
          
          # Test ZXPSignCmd
          & $Exe -help
          if ($LASTEXITCODE -ne 0) { echo "ZXPSignCmd help failed, but continuing..." }

      - name: Restore signing cert
        shell: pwsh
        run: |
          [IO.File]::WriteAllBytes("cert.p12",[Convert]::FromBase64String($env:P12_BASE64))
          $certSize = (Get-Item "cert.p12").Length
          echo "Certificate file size: $certSize bytes"
          if ($certSize -lt 1000) { throw "Certificate file too small, likely corrupted" }
          
          # Test certificate with OpenSSL if available
          if (Get-Command openssl -ErrorAction SilentlyContinue) {
            echo "Testing certificate with OpenSSL..."
            echo $env:ZXP_P12_PASSWORD | openssl pkcs12 -in cert.p12 -noout -info
            if ($LASTEXITCODE -ne 0) { echo "OpenSSL test failed, but continuing..." }
          }
        env:
          P12_BASE64: ${{ secrets.ZXP_P12_BASE64 }}
          ZXP_P12_PASSWORD: ${{ secrets.ZXP_P12_PASSWORD }}

      - name: Sign ZXP packages
        shell: pwsh
        run: |
          $Exe = "$env:GITHUB_WORKSPACE\CEP-Resources\ZXPSignCMD\4.1.103\win64\ZXPSignCmd.exe"
          
          # Test certificate first (ZXPSignCmd doesn't verify .p12 files directly)
          echo "Certificate file exists: $(Test-Path "$env:GITHUB_WORKSPACE\cert.p12")"
          echo "Certificate size: $((Get-Item "$env:GITHUB_WORKSPACE\cert.p12").Length) bytes"
          
          # Sign AE extension
          $aeIn = "$env:GITHUB_WORKSPACE\com.sync.extension.ae.panel"
          $aeOut = "$env:GITHUB_WORKSPACE\sync-extension-ae-windows-signed.zxp"
          $certPath = "$env:GITHUB_WORKSPACE\cert.p12"
          $password = "${{ secrets.ZXP_P12_PASSWORD }}"
          
          echo "Signing AE extension..."
          echo "Input: $aeIn"
          echo "Output: $aeOut"
          echo "Certificate: $certPath"
          echo "Password length: $($password.Length)"
          
          # Try signing with timestamp first
          & $Exe -sign "$aeIn" "$aeOut" "$certPath" "$password" -tsa "${{ github.event.inputs.tsa_url }}"
          if ($LASTEXITCODE -ne 0) { 
            echo "AE signing with timestamp failed (exit $LASTEXITCODE), trying without timestamp..."
            & $Exe -sign "$aeIn" "$aeOut" "$certPath" "$password"
            if ($LASTEXITCODE -ne 0) { throw "ZXPSignCmd failed for AE with exit $LASTEXITCODE" }
          }
          
          # Sign Premiere extension
          $pproIn = "$env:GITHUB_WORKSPACE\com.sync.extension.ppro.panel"
          $pproOut = "$env:GITHUB_WORKSPACE\sync-extension-premiere-windows-signed.zxp"
          
          echo "Signing Premiere extension..."
          & $Exe -sign "$pproIn" "$pproOut" "$certPath" "$password" -tsa "${{ github.event.inputs.tsa_url }}"
          if ($LASTEXITCODE -ne 0) { 
            echo "Premiere signing with timestamp failed (exit $LASTEXITCODE), trying without timestamp..."
            & $Exe -sign "$pproIn" "$pproOut" "$certPath" "$password"
            if ($LASTEXITCODE -ne 0) { throw "ZXPSignCmd failed for Premiere with exit $LASTEXITCODE" }
          }

      - name: Verify signatures (prints cert/timestamp info)
        shell: pwsh
        run: |
          $Exe = "$env:GITHUB_WORKSPACE\CEP-Resources\ZXPSignCMD\4.1.103\win64\ZXPSignCmd.exe"
          
          echo "Verifying AE extension..."
          & $Exe -verify "$env:GITHUB_WORKSPACE\sync-extension-ae-windows-signed.zxp" -certinfo
          if ($LASTEXITCODE -ne 0) { throw "AE verify failed" }
          
          echo "Verifying Premiere extension..."
          & $Exe -verify "$env:GITHUB_WORKSPACE\sync-extension-premiere-windows-signed.zxp" -certinfo
          if ($LASTEXITCODE -ne 0) { throw "Premiere verify failed" }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-zxp-packages
          path: |
            sync-extension-ae-windows-signed.zxp
            sync-extension-premiere-windows-signed.zxp
